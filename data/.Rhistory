library(readxl)
library(tidyverse)
dataGR14=read_xlsx("Tabla10-ERM2014-Regional.xlsx")
head(dataGR14)
organizacionesGR14 = dataGR14[c(5,6)]
organizacionesGR14 = organizacionesGR14[!duplicated(organizacionesGR14),]
organizacionesGR14 = organizacionesGR14[-c(1,4),]
nrow(organizacionesGR14)
table(organizacionesGR14$TIPOORGPOL)
names(table(organizacionesGR14[organizacionesGR14$TIPOORGPOL=="PARTIDO POLITICO",]$TXORGPOL))
electores = dataGR14 %>%
group_by(TXUBIGEO) %>% #seleccionar una fila por distrito
summarise(electoresGR14 = max(ELECTORES, na.rm = T))
emitidos = dataGR14 %>% group_by(TXUBIGEO) %>%
summarise(emitidosGR14 = sum(VOTOS, na.rm = T))
data_finalGR14 = left_join(electores, emitidos, by="TXUBIGEO") #join
#ciudar que los que tienen 0 en votos emitidos sean NA
data_finalGR14[data_finalGR14$emitidosGR14==0,]$emitidosGR14 = NA
data_finalGR14 = data_finalGR14 %>%
mutate(ausentesGR14= electoresGR14 - emitidosGR14,
por_ausentesGR14 = (ausentesGR14/electoresGR14)*100)
blancos_nulos = dataGR14 %>% filter(TIPOORGPOL == "VOTOS EN BLANCO" | TIPOORGPOL =="VOTOS NULOS" ) %>%
group_by(TXUBIGEO) %>%
summarise(blancosnulosGR14 = sum(VOTOS, na.rm = T))
data_finalGR14 = left_join(data_finalGR14, blancos_nulos, by="TXUBIGEO") #join
data_finalGR14  = data_finalGR14 %>%
mutate (por_blancosnulosGR14 = (blancosnulosGR14/emitidosGR14)*100)
data_finalGR14  = data_finalGR14 %>%
mutate (validosGR14 = emitidosGR14-blancosnulosGR14)
partidos_politicos = dataGR14 %>% filter(TIPOORGPOL == "PARTIDO POLITICO") %>%
group_by(TXUBIGEO) %>%
summarise(partidosGR14 = sum(VOTOS, na.rm = T))
data_finalGR14 = left_join(data_finalGR14, partidos_politicos, by="TXUBIGEO") #join
mov_regionales = dataGR14 %>% filter(TIPOORGPOL == "MOVIMIENTO REGIONAL") %>%
group_by(TXUBIGEO) %>%
summarise(movimientosGR14 = sum(VOTOS, na.rm = T))
data_finalGR14 = left_join(data_finalGR14, mov_regionales, by="TXUBIGEO") #join
data_finalGR14  = data_finalGR14 %>%
mutate (por_partidosGR14 = (partidosGR14/validosGR14)*100,
por_movimientosGR14 = (movimientosGR14/validosGR14)*100)
dataGR14= dataGR14[!dataGR14$TIPOORGPOL == "VOTOS EN BLANCO",]
dataGR14= dataGR14[!dataGR14$TIPOORGPOL == "VOTOS NULOS",]
dataGR14 <- dataGR14[order(dataGR14$TXUBIGEO, -dataGR14$VOTOS),]
primero = dataGR14 %>% group_by(TXUBIGEO) %>% filter(row_number()==1) %>% mutate(primeroGR14=VOTOS)
data_finalGR14 = left_join(data_finalGR14, primero[c(1,13)], by="TXUBIGEO") #join
segundo = dataGR14 %>% group_by(TXUBIGEO) %>% filter(row_number()==2) %>% mutate(segundoGR14=VOTOS)
data_finalGR14 = left_join(data_finalGR14, segundo[c(1,13)], by="TXUBIGEO") #join
data_finalGR14 = data_finalGR14 %>% mutate(concentracionGR14 = primeroGR14/validosGR14 + segundoGR14/validosGR14)
head(data_finalGR14)
dataGP14=read_xlsx("PROVINCIAL_2014_DISTRITAL.xlsx")
head(dataGP14)
electores = dataGP14 %>%
group_by(TXUBIGEO) %>% #seleccionar una fila por distrito
summarise(electoresGP14 = max(ELECTORES, na.rm = T))
emitidos = dataGP14 %>% group_by(TXUBIGEO) %>%
summarise(emitidosGP14 = sum(VOTOS, na.rm = T))
data_finalGP14 = left_join(electores, emitidos, by="TXUBIGEO") #join
#ciudar que los que tienen 0 en votos emitidos sean NA
data_finalGP14[data_finalGP14$emitidosGP14==0,]$emitidosGP14 = NA
data_finalGP14 = data_finalGP14 %>%
mutate(ausentesGP14= electoresGP14 - emitidosGP14,
por_ausentesGP14 = (ausentesGP14/electoresGP14)*100)
blancos_nulos = dataGP14 %>% filter(TXORGPOL == "VOTOS EN BLANCO" | TXORGPOL =="VOTOS NULOS" ) %>%
group_by(TXUBIGEO) %>%
summarise(blancosnulosGP14 = sum(VOTOS, na.rm = T))
data_finalGP14 = left_join(data_finalGP14, blancos_nulos, by="TXUBIGEO") #join
data_finalGP14  = data_finalGP14 %>%
mutate (por_blancosnulosGP14 = (blancosnulosGP14/emitidosGP14)*100)
data_finalGP14  = data_finalGP14 %>%
mutate (validosGP14 = emitidosGP14-blancosnulosGP14)
dataGP14= dataGP14[!dataGP14$TXORGPOL == "VOTOS EN BLANCO",]
dataGP14= dataGP14[!dataGP14$TXORGPOL == "VOTOS NULOS",]
dataGP14 = dataGP14[order(dataGP14$TXUBIGEO, -dataGP14$VOTOS),]
primero = dataGP14 %>% group_by(TXUBIGEO) %>% filter(row_number()==1) %>% mutate(primeroGP14=VOTOS)
data_finalGP14 = left_join(data_finalGP14, primero[c(1,12)], by="TXUBIGEO") #join
segundo = dataGP14 %>% group_by(TXUBIGEO) %>% filter(row_number()==2) %>% mutate(segundoGP14=VOTOS)
data_finalGP14 = left_join(data_finalGP14, segundo[c(1,12)], by="TXUBIGEO") #join
data_finalGP14 = data_finalGP14 %>% mutate(concentracionGP14 = primeroGP14/validosGP14 + segundoGP14/validosGP14)
head(data_finalGP14)
dataGL14=read_xlsx("distrital_2014_DISTRITAL.xlsx")
head(dataGL14)
electores = dataGL14 %>%
group_by(TXUBIGEO) %>% #seleccionar una fila por distrito
summarise(electoresGL14 = max(ELECTORES, na.rm = T))
emitidos = dataGL14 %>% group_by(TXUBIGEO) %>%
summarise(emitidosGL14 = sum(VOTOS, na.rm = T))
data_finalGL14 = left_join(electores, emitidos, by="TXUBIGEO") #join
#ciudar que los que tienen 0 en votos emitidos sean NA
data_finalGL14[data_finalGL14$emitidosGL14==0,]$emitidosGL14 = NA
data_finalGL14 = data_finalGL14 %>%
mutate(ausentesGL14= electoresGL14 - emitidosGL14,
por_ausentesGL14 = (ausentesGL14/electoresGL14)*100)
blancos_nulos = dataGL14 %>% filter(TXORGPOL == "VOTOS EN BLANCO" | TXORGPOL =="VOTOS NULOS" ) %>%
group_by(TXUBIGEO) %>%
summarise(blancosnulosGL14 = sum(VOTOS, na.rm = T))
data_finalGL14 = left_join(data_finalGL14, blancos_nulos, by="TXUBIGEO") #join
data_finalGL14  = data_finalGL14 %>%
mutate (por_blancosnulosGL14 = (blancosnulosGL14/emitidosGL14)*100)
data_finalGL14  = data_finalGL14 %>%
mutate (validosGL14 = emitidosGL14-blancosnulosGL14)
dataGL14= dataGL14[!dataGL14$TXORGPOL == "VOTOS EN BLANCO",]
dataGL14= dataGL14[!dataGL14$TXORGPOL == "VOTOS NULOS",]
dataGL14 = dataGL14[order(dataGL14$TXUBIGEO, -dataGL14$VOTOS),]
primero = dataGL14 %>% group_by(TXUBIGEO) %>% filter(row_number()==1) %>% mutate(primeroGL14=VOTOS)
data_finalGL14 = left_join(data_finalGL14, primero[c(1,12)], by="TXUBIGEO") #join
segundo = dataGL14 %>% group_by(TXUBIGEO) %>% filter(row_number()==2) %>% mutate(segundoGL14=VOTOS)
data_finalGL14 = left_join(data_finalGL14, segundo[c(1,12)], by="TXUBIGEO") #join
data_finalGL14 = data_finalGL14 %>% mutate(concentracionGL14 = primeroGL14/validosGL14 + segundoGL14/validosGL14)
head(data_finalGL14)
View(data_finalGL14)
library(XML) # instalen primero!
library(RCurl) # instalen primero!
# URL
link=  "https://es.wikipedia.org/wiki/Anexo:Pa%C3%ADses_y_territorios_por_tasa_de_fertilidad"
# Data
wikiLinkContents = getURL(link)
CIA = readHTMLTable(wikiLinkContents,
stringsAsFactors=F,
which = 4, #van jugando hasta encontrar la tabla que les interesa, en esta caso la del FMI
header = T) #titulos
head(CIA)
names(CIA)=c("raro","pais","tasa")
CIA=CIA[-c(1)]
head(CIA)
str(CIA)
View(CIA)
CIA[223,]
CIA[225,]
load("~/Dropbox/consultorías/BID MEF/R avances/tabla_BancoInversiones.rda")
View(tabla_BancoInversiones[c("MONTO_F15", "MONTO_F16", "MONTO_VIABLE")])
data=tabla_BancoInversiones[c("MONTO_F15", "MONTO_F16", "MONTO_VIABLE")]
data[data$MONTO_F15==data$MONTO_VIABLE,]
data=data[data$MONTO_F15==data$MONTO_VIABLE,]
View(data)
View(tabla_BancoInversiones)
View(tabla_BancoInversiones[c("MONTO_F15", "MONTO_F16", "MONTO_VIABLE")])
View(tabla_BancoInversiones[c("CODIGO_SNIP",MONTO_F15", "MONTO_F16", "MONTO_VIABLE")])
View(tabla_BancoInversiones)
View(tabla_BancoInversiones[c("PROYECTO", "MONTO_F15", "MONTO_F16", "MONTO_VIABLE")])
View(tabla_BancoInversiones[c("PROYECTO", "CODIGO_UNICO", "MONTO_F15", "MONTO_F16", "MONTO_VIABLE")])
data=data[data$MONTO_F16==data$MONTO_VIABLE,]
View(data)
data=tabla_BancoInversiones[c("MONTO_F15", "MONTO_F16", "MONTO_VIABLE")]
data=data[data$MONTO_F16==data$MONTO_VIABLE,]
View(data)
data=data[data$MONTO_F15>0,]
View(data)
data=tabla_BancoInversiones[c("CODIGO_PROYECTO","MONTO_F15", "MONTO_F16", "MONTO_VIABLE")]
View(tabla_BancoInversiones)
data=tabla_BancoInversiones[c("CODIGO_UNICO","MONTO_F15", "MONTO_F16", "MONTO_VIABLE")]
data=data[data$MONTO_F16==data$MONTO_VIABLE,]
data=data[data$MONTO_F15>0,]
View(data)
0.5*3.784931e+05
# el cambio del "odds" para que Keiko gane, si el IDH aumenta en 1, manteniendo lo demas constante:
idh=odds[2]
## mejor interpretación
## odds ratios y 95% CI
odds=exp(coef(model1))
## mejor interpretación
## odds ratios y 95% CI
odds=exp(coef(model1))
model1 <- glm(ganaKeiko ~ .,
data = regvars,
family = "binomial")
library(foreign)
perudat=read.dbf("provinciasPeru.dbf",as.is = T)
names(perudat)
# Donde gana Keiko en segunda vuelta?
perudat$ganaKeiko=ifelse(perudat$Voto_FP>perudat$Voto_PPK,
1,0)
toPlot=table(perudat$ganaKeiko)
names(toPlot)=c('pierde','gana')
barplot(toPlot,
xlab = 'Resultado Keiko Provincial',
ylab = 'Conteo de Provincias',
col = c('red','green'))
# podemos querer explicar el ganar o perder, con:
# 1-densidad del estado (IDE)
# 2-desarrollo humano (IDH)
# 3 estar en la costa
regvars=perudat[,c(40,9,14,21)]
names(regvars)
summary(regvars[,c(2,3)])
boxplot(regvars$IDH~regvars$ganaKeiko)
boxplot(regvars$IDE~regvars$ganaKeiko)
regvars$costa <- factor(regvars$costa)
table(regvars$costa)
table(regvars$ganaKeiko,regvars$costa)
barplot(table(regvars$ganaKeiko,regvars$costa),
beside = T)
model1 <- glm(ganaKeiko ~ .,
data = regvars,
family = "binomial")
summary(model1)
## mejor interpretación
## odds ratios y 95% CI
odds=exp(coef(model1))
ci=exp(confint(model1))
cbind(odds,ci)
# el cambio del "odds" para que Keiko gane, si el IDH aumenta en 1, manteniendo lo demas constante:
idh=odds[2]
(idh-1)*100 # wow!
# el cambio del "odds" para que Keiko gane, si el IDE aumenta en 1, manteniendo lo demas constante:
ide=odds[3] # es negativo
(ide-1)*100 # wow!
# interpracion usando marginal effects:
library(margins)
(model1M = margins(model1))
# for punto que suba IDE e IDH, como afecta en promedio la probabilidad que gane Keiko?
plot(model1M)
(0.68-1)*100
# el cambio del "odds" para que un alcalde sea revocado, si el NEP aumenta en 1, manteniendo lo demas constante:
nep=odds[2]
(nep-1)*100 # wow!
link="https://github.com/PoliticayGobiernoPUCP/EstadisticaPoliticaGobiernoII/raw/master/sesiones/data/Data_final.sav"
library(foreign)
data=read.spss(link, to.data.frame=T, use.value.labels = F)
head(data)
names(data)
data$revocatoria = as.factor(ifelse(data$AutRevocadas06Por > 0, 1,0))
table(data$revocatoria)
prop.table(table(data$revocatoria))*100
toPlot=table(data$revocatoria)
names(toPlot)=c("No revocatoria", "Si revocatoria")
barplot(toPlot,
xlab = "Revocatorias a nivel distrital",
ylab = "Conteo de distritos",
col = c("black","red"))
str(data$NEP)
summary(data$NEP)
boxplot(data$NEP)
boxplot(data$NEP~data$revocatoria)
t.test(data$NEP~data$revocatoria,var.equal = T)
str(data$IDH)
summary(data$IDH)
boxplot(data$IDH)
boxplot(data$IDH~data$revocatoria)
t.test(data$IDH~data$revocatoria,var.equal = T)
str(data$PoblacionElectoral)
summary(data$PoblacionElectoral)
boxplot(data$PoblacionElectoral)
boxplot(data$PoblacionElectoral~data$revocatoria)
t.test(data$PoblacionElectoral~data$revocatoria,var.equal = T)
Subdata=data[c(1,19,20,21,23)]
head(Subdata)
row.names(Subdata)=Subdata$UbigeoJNE
Subdata=Subdata[-1]
head(Subdata)
modelo1 <- glm(revocatoria ~ .,
data = Subdata,
family = "binomial")
summary(modelo1)
## mejor interpretación
## odds ratios y 95% CI
odds=exp(coef(modelo1))
ci=exp(confint(modelo1))
cbind(odds,ci)
# el cambio del "odds" para que un alcalde sea revocado, si el NEP aumenta en 1, manteniendo lo demas constante:
nep=odds[2]
(nep-1)*100 # wow!
0.01539*100
## mejor interpretación
## odds ratios y 95% CI
odds=exp(coef(modelo1))
ci=exp(confint(modelo1))
cbind(odds,ci)
1.5*1.17
names(pavimentando)
pavimentando$aprop
link="https://github.com/PoliticayGobiernoPUCP/EstadisticaPoliticaGobiernoII/raw/master/sesiones/data/PAVIMENTANDO.sav"
library(foreign)
pavimentando=read.spss(link, to.data.frame=T, use.value.labels = F)
head(pavimentando)
names(pavimentando)
str(pavimentando$apropiaciondolar)
summary(pavimentando$apropiaciondolar)
hist(pavimentando$apropiaciondolar)
nrow(pavimentando[pavimentando$apropiaciondolar== 0,])
str(pavimentando$priorizado)
pavimentando$priorizado = factor(pavimentando$priorizado, labels=c("No", "Si"))
str(pavimentando$priorizado) #comprobamos
table(pavimentando$priorizado)
prop.table(table(pavimentando$priorizado))*100
t.test(pavimentando$apropiaciondolar~pavimentando$priorizado,var.equal = T)
str(pavimentando$pctopo)
summary(pavimentando$pctopo)
cor.test(pavimentando$apropiaciondolar, pavimentando$pctopo)
str(pavimentando$uribista)
pavimentando$uribista = factor(pavimentando$uribista, labels=c("No", "Si"))
str(pavimentando$uribista) #comprobamos
table(pavimentando$uribista)
prop.table(table(pavimentando$uribista))*100
t.test(pavimentando$apropiaciondolar~pavimentando$uribista,var.equal = T)
str(pavimentando$consejocomunal)
pavimentando$consejocomunal= factor(pavimentando$consejocomunal, labels=c("No", "Si"))
str(pavimentando$consejocomunal) #comprobamos
table(pavimentando$consejocomunal)
prop.table(table(pavimentando$consejocomunal))*100
t.test(pavimentando$apropiaciondolar~pavimentando$consejocomunal,var.equal = T)
str(pavimentando$ejecucion)
pavimentando$ejecucion= factor(pavimentando$ejecucion, labels=c("No", "Si"))
str(pavimentando$ejecucion) #comprobamos
table(pavimentando$ejecucion)
prop.table(table(pavimentando$ejecucion))*100
t.test(pavimentando$apropiaciondolar~pavimentando$ejecucion,var.equal = T)
str(pavimentando$poblacioncienmil)
summary(pavimentando$poblacioncienmil)
cor.test(pavimentando$apropiaciondolar, pavimentando$poblacioncienmil)
str(pavimentando$nbi)
summary(pavimentando$nbi)
cor.test(pavimentando$apropiaciondolar, pavimentando$nbi)
modelo1=glm(apropiaciondolar~.,data=pavimentando,family ="gaussian")
summary(modelo1)
mean(modelo1$residuals)
par(mfrow=c(2,2))
plot(modelo1)
data2=data[complete.cases(data),]
for (var in data[-7]){
var= as.numeric(var)
corr=cor.test(modelo1$residuals,var)
print(corr$p.value)
}
pavimentando$apropiaciondolar = as.factor(ifelse(pavimentando$apropiaciondolar >0,1,0))
View(pavimentando)
names(data)
names(pavimentando)
modelo1 <- glm(pavimentando[-c(1,2)] ~ .,
data = Subdata,
family = "binomial")
modelo1 <- glm(pavimentando[-c(1:2)] ~ .,
data = Subdata,
family = "binomial")
modelo1 <- glm(pavimentando[,-c(1,2)] ~ .,
data = Subdata,
family = "binomial")
modelo1 <- glm(pavimentando[-c("poblacioncienmil", "nbi")] ~ .,
data = Subdata,
family = "binomial")
modelo1 <- glm(apropiaciondolar ~ .,
data = pavimentando[-c("poblacioncienmil", "nbi")],
family = "binomial")
modelo1 <- glm(apropiaciondolar ~ .,
data = pavimentando[,-c(1,2)],
family = "binomial")
summary(modelo1)
modelo1 <- glm(apropiaciondolar ~ .,
data = pavimentando,
family = "binomial")
summary(modelo1)
modelo1 <- glm(apropiaciondolar ~ .,
data = pavimentando[,-c(1,2)],
family = "binomial")
summary(modelo1)
modelo1 <- glm(apropiaciondolar ~ .,
data = pavimentando[,-c(1,2)],
family = "binomial")
summary(modelo1)
## mejor interpretación
## odds ratios y 95% CI
odds=exp(coef(modelo1))
ci=exp(confint(modelo1))
cbind(odds,ci)
# el cambio del "odds" para que un alcalde sea revocado, si el NEP aumenta en 1, manteniendo lo demas constante:
nep=odds[2]
(nep-1)*100 # wow!
library(margins) #instalen primero
modelo1m = margins(modelo1)
modelo1m
# para cada punto de aumento en la variable dependiente, como afecta en promedio la probabilidad que ser revocado?
0.06021*100
modelo1 <- glm(apropiaciondolar ~ .,
data = pavimentando,
family = "binomial")
summary(modelo1)
library(margins) #instalen primero
modelo1m = margins(modelo1)
modelo1m
# para cada punto de aumento en la variable dependiente, como afecta en promedio la probabilidad que ser revocado?
-0.01718*100
